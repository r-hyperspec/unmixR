.get_invariants2 <- function(data, indices, endmember) {
  # Calculate null space
  indices_base <- indices[-endmember]
  null_space <-       
      MASS::Null(t(
        # Remove first row from all other rows to move from points to vectors
        scale(data[indices_base[-1], , drop = FALSE], center = data[indices_base[1], ], scale = FALSE)
      ))
  
  # Calculate heights of bases
  h_base <- data[indices_base[1], ] %*% null_space

  
  # Calculate heights of current vertices
  # h_current <- data[indices[endmember], ] %*% null_space
  # h_current <- norm(as.numeric(h_current - h_base), "2")
    
  list(
    "null_space" = null_space,
    "h_base" = h_base
    # "h_current" = h_current
  )  
}

.estimate_volume_change_by_height2 <- function(data, indices, endmember, invariants=NULL) {
  n_points <- nrow(data)
  n_endmembers <- length(endmembers)
  p <- length(indices)

  if (is.null(invariants)) {
    invariants <- .get_invariants2(data, indices, endmember)
  }
  null_space <- invariants$null_space
  h_base <- invariants$h_base
  h_current <- invariants$h_current
  
  H <- data %*% null_space

  H <- scale(H, center = h_base, scale = FALSE)
  
  apply(H, 1, norm, type="2")
}

.nfindr_height_points2 <- function(data, indices, iter_max=10, debug.level=0) {
  p <- length(indices)
  m <- nrow(data)

  k <- 0
  n_replacements <- 0
  is_replacement <- TRUE
  indices_best <- indices
  if (debug.level > 1) {
    replacements <- matrix(indices_best, nrow=1)
  }

  while ((k < iter_max) && is_replacement) {
    k <- k + 1
    is_replacement <- FALSE
    for (j in 1:p) {
      invariants <- .get_invariants2(data, indices_best, j)
      estimates <- .estimate_volume_change_by_height2(
        data, indices_best, j,
        invariants = invariants
      )
      estimates <- as.numeric(estimates)
      if (any(estimates > estimates[indices_best[j]])) {
        # Update current simplex vertices
        i <- which.max(estimates)
        indices_best[j] <- i
        # Mark that a replacement took place
        is_replacement <- TRUE
        # For debugging
        n_replacements <- n_replacements + 1
        if (debug.level > 1) {
          replacements <- rbind(replacements, indices_best)
        }
      }
    }
  }

  result <- list(
    "indices" = indices_best,
    "endmembers" = data[indices_best,]
  )
  if (debug.level > 0) {
    result[["iterations_count"]] <- k
    result[["replacements_count"]] <- n_replacements
  }
  if (debug.level > 1) {
    result[["replacements"]] <- replacements
  }
  
  result
}
